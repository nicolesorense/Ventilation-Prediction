# -*- coding: utf-8 -*-
"""ventilation_data_collection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1REm5m8OuTzFfLxiDxI6fx0FxTHN0csYS

# MIMIC-IV Data Collection for Ventilation Prediction
This notebook collects data from MIMIC-IV for ventilation prediction using machine learning models. It selects:
- Train set: 9,000 patients (~5:1 vent:non-vent ratio)
- Test set: 10,000 random patients not in train set.
- Features: Patient demographics, radiology notes, lab results, vitals, etc.
"""

!pip install google-cloud-bigquery

import pandas as pd
import os
from google.cloud import bigquery

"""## Authentication
To use BigQuery, set up a Google Cloud project and authenticate:
1. Create a service account key (JSON) in your Google Cloud project.
2. Set the environment variable:
   ```bash
   export GOOGLE_APPLICATION_CREDENTIALS="/path_to_key.json"
   ```
3. Ensure your project has access to physionet-data.mimiciv_3_1_*
"""

# Get project ID from environment variable
project_id = os.getenv('GOOGLE_CLOUD_PROJECT', 'your-project-id')  # Default for documentation
client = bigquery.Client(project=project_id)

"""## Train/Test Split
- **Test Set**: 10,000 random patients from `icustays`.
- **Train Set**: 9,000 patients (1,500 ventilated, 7,500 non-ventilated, ~5:1 ratio) to balance ventilation prediction training.
- Ventilation criteria: Procedure `225792` (MV), PEEP > 5 (`220339`), FiO2 > 21 (`223835`).
"""

# Select test patients randomly
query = """
  WITH all_patients AS (
  SELECT DISTINCT subject_id
  FROM `physionet-data.mimiciv_3_1_icu.icustays`
  )
  SELECT subject_id
  FROM all_patients
  ORDER BY RAND()
  LIMIT 10000

"""

query_job = client.query(query)
test_patients_df = query_job.to_dataframe()

# Get patient ids
test_patient_ids = test_patients_df['subject_id'].tolist()

# Convert your list of patient_ids to a string that can be used in the SQL query
test_patient_ids_str = ",".join([str(pid) for pid in test_patient_ids])

# Extract disjoint train set, with more balanced 5:1 ratio of vent:nonvent
query = f"""
  -- Identify patients with mv procedure (225792)
  -- and PEEP > 5 (220339) and FiO2 > 21 (223835)
  WITH vent_patients AS(
    SELECT DISTINCT p.subject_id
    FROM `physionet-data.mimiciv_3_1_icu.procedureevents` p
    INNER JOIN `physionet-data.mimiciv_3_1_icu.chartevents` c1
      ON p.subject_id = c1.subject_id
      AND p.hadm_id = c1.hadm_id
      AND c1.itemid = 220339 -- PEEP
      AND c1.value IS NOT NULL
      AND SAFE_CAST(c1.value AS FLOAT64) > 5
    INNER JOIN `physionet-data.mimiciv_3_1_icu.chartevents` c2
      ON p.subject_id = c2.subject_id
      AND p.hadm_id = c2.hadm_id
      AND c2.itemid = 223835 -- FiO2
      AND c2.value IS NOT NULL
      AND SAFE_CAST(c2.value AS FLOAT64) > 21
    WHERE p.itemid IN (225792)
      AND p.subject_id NOT IN ({test_patient_ids_str})
    ORDER BY FARM_FINGERPRINT(CAST(subject_id AS STRING))
    LIMIT 1500
  ),
  non_vent_patients AS(
    -- Select patients who do not meet vent criteria
    SELECT DISTINCT subject_id
    FROM `physionet-data.mimiciv_3_1_icu.icustays`
    WHERE subject_id NOT IN (SELECT subject_id FROM vent_patients)
    AND subject_id NOT IN ({test_patient_ids_str})
    ORDER BY FARM_FINGERPRINT(CAST(subject_id AS STRING))
    LIMIT 7500
  ) SELECT subject_id
  FROM vent_patients
  UNION ALL
  SELECT subject_id
  FROM non_vent_patients
"""

query_job = client.query(query)
train_patients_df = query_job.to_dataframe()

# Get train patient ids
train_patient_ids = train_patients_df['subject_id'].tolist()
train_patient_ids_str = ",".join([str(pid) for pid in train_patient_ids])

# Query to select train patients given patient IDs
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_hosp.patients`
    WHERE subject_id IN ({train_patient_ids_str})
  """

query_job = client.query(query)  # Make an API request
train_patients_df = query_job.to_dataframe()

# Query to select test patients given patient IDs
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_hosp.patients`
    WHERE subject_id IN ({test_patient_ids_str})
  """

query_job = client.query(query)  # Make an API request
test_patients_df = query_job.to_dataframe()

train_patients_df.shape, test_patients_df.shape

# Query to select train notes for the given patient IDs
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_note.radiology`
    WHERE subject_id IN ({train_patient_ids_str})
"""

query_job = client.query(query)
train_notes_df = query_job.to_dataframe()

# Test notes
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_note.radiology`
    WHERE subject_id IN ({test_patient_ids_str})
"""

query_job = client.query(query)
test_notes_df = query_job.to_dataframe()

train_notes_df.shape, test_notes_df.shape

# Query to select train info from admissions df
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_hosp.admissions`
    WHERE subject_id IN ({train_patient_ids_str})
"""

query_job = client.query(query)
train_admissions_df = query_job.to_dataframe()

# Admissions info for test patients
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_hosp.admissions`
    WHERE subject_id IN ({test_patient_ids_str})
"""

query_job = client.query(query)
test_admissions_df = query_job.to_dataframe()

# Query to select train info from procedures df
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_icu.procedureevents`
    WHERE subject_id IN ({train_patient_ids_str})
"""

query_job = client.query(query)
train_procedures_df = query_job.to_dataframe()

# Get test procedures
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_icu.procedureevents`
    WHERE subject_id IN ({test_patient_ids_str})
"""

query_job = client.query(query)
test_procedures_df = query_job.to_dataframe()

relevant_lab_item_ids = '50820, 50818, 50821, 50882, 50813, 50817, 50931, 50862, 51222, 50912'

# Query for train labevents
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_hosp.labevents`
    WHERE subject_id IN ({train_patient_ids_str})
    AND itemid IN ({relevant_lab_item_ids})
"""

query_job = client.query(query)
train_labevents_df = query_job.to_dataframe()

# Query for test labevents
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_hosp.labevents`
    WHERE subject_id IN ({test_patient_ids_str})
    AND itemid IN ({relevant_lab_item_ids})
"""

query_job = client.query(query)
test_labevents_df = query_job.to_dataframe()

relevant_chartevent_items = "220277, 220210, 220045, 220052, 223761, 223991, 224828, 226253, 223835, 223901, 223900, 220739, 220339, 223835" # Last 2 are ventilation indicators

# Query for train chartevents
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_icu.chartevents`
    WHERE subject_id IN ({train_patient_ids_str})
    AND itemid IN ({relevant_chartevent_items})
"""

query_job = client.query(query)
train_chartevents_df = query_job.to_dataframe()

# Query for test chartevents
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_icu.chartevents`
    WHERE subject_id IN ({test_patient_ids_str})
    AND itemid IN ({relevant_chartevent_items})
"""

query_job = client.query(query)
test_chartevents_df = query_job.to_dataframe()

relevant_input_item_ids = '225879, 225798, 225883, 225892'

# Query for train inputevents
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_icu.inputevents`
    WHERE subject_id IN ({train_patient_ids_str})
    AND itemid IN ({relevant_input_item_ids})
"""

query_job = client.query(query)
train_inputevents_df = query_job.to_dataframe()

# Query for test inputevents
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_icu.inputevents`
    WHERE subject_id IN ({test_patient_ids_str})
    AND itemid IN ({relevant_input_item_ids})
"""

query_job = client.query(query)
test_inputevents_df = query_job.to_dataframe()

# Query for train diagnoses
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_hosp.diagnoses_icd`
    WHERE subject_id IN ({train_patient_ids_str})
"""

query_job = client.query(query)
train_diagnoses_df = query_job.to_dataframe()

# Query for test diagnoses
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_hosp.diagnoses_icd`
    WHERE subject_id IN ({test_patient_ids_str})
"""

query_job = client.query(query)
test_diagnoses_df = query_job.to_dataframe()

# Query for train icu stays
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_icu.icustays`
    WHERE subject_id IN ({train_patient_ids_str})
"""
query_job = client.query(query)
train_icustays_df = query_job.to_dataframe()

# Query for test icu stays
query = f"""
    SELECT *
    FROM `physionet-data.mimiciv_3_1_icu.icustays`
    WHERE subject_id IN ({test_patient_ids_str})
"""
query_job = client.query(query)
test_icustays_df = query_job.to_dataframe()

"""**Note**: The processed dataframes (`train_patients.csv`, `test_notes.csv`, etc.) are derived from MIMIC-IV and must not be shared publicly per the MIMIC-IV Data Use Agreement. Users must have authorized access to MIMIC-IV (via PhysioNet) to generate these files. Set `output_dir` to a secure, local directory."""

# Configuration
output_dir = "data/processed"  # User-configurable, not Google Drive
os.makedirs(output_dir, exist_ok=True)

# Warning about DUA
print("Warning: The following dataframes are derived from MIMIC-IV and should not be shared publicly. "
      "Ensure compliance with the MIMIC-IV Data Use Agreement.")

# Save dataframes locally
train_patients_df.to_csv(os.path.join(output_dir, 'train_patients.csv'), index=False)
test_patients_df.to_csv(os.path.join(output_dir, 'test_patients.csv'), index=False)
train_notes_df.to_csv(os.path.join(output_dir, 'radiology_train_notes.csv'), index=False)
test_notes_df.to_csv(os.path.join(output_dir, 'radiology_test_notes.csv'), index=False)
train_admissions_df.to_csv(os.path.join(output_dir, 'train_admissions.csv'), index=False)
test_admissions_df.to_csv(os.path.join(output_dir, 'test_admissions.csv'), index=False)
train_procedures_df.to_csv(os.path.join(output_dir, 'train_procedures.csv'), index=False)
test_procedures_df.to_csv(os.path.join(output_dir, 'test_procedures.csv'), index=False)
train_labevents_df.to_csv(os.path.join(output_dir, 'train_labevents.csv'), index=False)
test_labevents_df.to_csv(os.path.join(output_dir, 'test_labevents.csv'), index=False)
train_chartevents_df.to_csv(os.path.join(output_dir, 'train_chartevents.csv'), index=False)
test_chartevents_df.to_csv(os.path.join(output_dir, 'test_chartevents.csv'), index=False)
train_inputevents_df.to_csv(os.path.join(output_dir, 'train_inputevents.csv'), index=False)
test_inputevents_df.to_csv(os.path.join(output_dir, 'test_inputevents.csv'), index=False)
train_diagnoses_df.to_csv(os.path.join(output_dir, 'train_diagnoses.csv'), index=False)
test_diagnoses_df.to_csv(os.path.join(output_dir, 'test_diagnoses.csv'), index=False)
train_icustays_df.to_csv(os.path.join(output_dir, 'train_icustays.csv'), index=False)
test_icustays_df.to_csv(os.path.join(output_dir, 'test_icustays.csv'), index=False)

